-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

fun eval (c@[st, s, w], insns) {
   case insns of
     {} -> c
   | i : insns ->
       eval (
         case i of
           READ       -> case readWorld (w) of [n, w]     -> [n : st, s, w]                 esac
         | WRITE      -> case st            of n : st     -> [st, s, writeWorld (n, w)]     esac
         | BINOP (op) -> case st            of x : y : st -> [evalOp (op, y, x) : st, s, w] esac
         | CONST (n)  -> [n : st, s, w]
         | LD    (x)  -> [s (x) : st, s, w]
         | ST    (x)  -> case st of n : st -> [st, s <- [x, n], w] esac
         esac,
         insns
       )
   esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

fun compileExpr (expr) {
  case expr of
    Var   (x)        -> singleton (LD (x))
  | Const (n)        -> singleton (CONST (n))
  | Binop (op, l, r) -> {compileExpr (l), compileExpr (r), BINOP (op)}
  esac
}

public fun compileSM (stmt) {
  fun compile (stmt) {
    case stmt of
      Skip           -> {}
    | Read  (x)      -> {READ, ST (x)}
    | Write (e)      -> {compileExpr (e), WRITE}
    | Assn  (x, e)   -> {compileExpr (e), ST (x)}
    | Seq   (s1, s2) -> {compile (s1), compile (s2)}
    esac
  }

  deepFlatten (compile (stmt))
}

