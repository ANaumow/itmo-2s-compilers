-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
      Var (v)        -> st(v)
    | Const (i)      -> i
    | Binop(s, l, r) ->
      l := evalExpr(st, l);
      r := evalExpr(st, r);
      evalOp(s, l, r)
  esac
}

public fun evalOp(op, l, r) {
  case op of
      "+"  -> l + r
    | "-"  -> l - r
    | "*"  -> l * r
    | "/"  -> l / r
    | "%"  -> l % r
    | "==" -> l == r
    | "!=" -> l != r
    | "<"  -> l < r
    | "<=" -> l <= r
    | ">"  -> l > r
    | ">=" -> l >= r
    | "&&" -> l && r
    | "!!" -> l !! r
  esac
}
