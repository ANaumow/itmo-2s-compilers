-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval(c@[st, world], stmt) {
  case stmt of
      Assn(v, e)        -> [st <- [v, evalExpr(st, e)], world]
    | Seq(stmt1, stmt2) -> eval(eval([st, world], stmt1), stmt2)
    | Skip              -> c
    | Read(v)           ->
      var temp = readWorld(world);
      var n = temp.fst;
      var world2 = temp.snd;
      [st <- [v, n], world2]
    | Write(e)          -> [st, writeWorld(evalExpr(st, e), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, stmt) {
  eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
